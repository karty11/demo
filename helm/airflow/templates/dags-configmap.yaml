apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-dags
  namespace: airflow
data:
  mysql_to_minio_parquet.py: |
    from airflow import DAG
    from airflow.operators.python import PythonOperator
    from datetime import datetime
    import os, requests

    def extract():
        print("Extract from MySQL → save to MinIO")

    def transform():
        print("Transform raw data → Parquet")

    def notify_grafana(**context):
        url = os.environ.get("GRAFANA_API_URL", "http://grafana.grafana:3000") + "/api/annotations"
        headers = {
            "Authorization": f"Bearer {os.environ.get('GRAFANA_API_KEY','demo-key')}",
            "Content-Type": "application/json"
        }
        payload = {"tags": ["airflow"], "text": f"DAG {context['dag'].dag_id} succeeded at {context['ts']}"}
        try:
            requests.post(url, headers=headers, json=payload, timeout=5)
        except Exception as e:
            print("Grafana notify failed:", e)

    with DAG(
        dag_id="mysql_to_minio_parquet",
        start_date=datetime(2025, 1, 1),
        schedule_interval="@daily",
        catchup=False,
    ) as dag:
        extract = PythonOperator(task_id="extract", python_callable=extract)
        transform = PythonOperator(task_id="transform", python_callable=transform)
        notify = PythonOperator(task_id="notify_grafana", python_callable=notify_grafana)
        extract >> transform >> notify

